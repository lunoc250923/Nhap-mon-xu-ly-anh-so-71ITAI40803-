Câu 1:
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as sn
from skimage import feature
import matplotlib.pylab as plt
import colorsys

# Đọc ảnh
a = iio.imread('a.jpg', mode='L').astype(np.uint8)

# Mean Filter 
k = np.ones((5, 5)) / 25
b = sn.convolve(a, k).astype(np.uint8)
iio.imsave('a_mean.jpg', b)  # Lưu ảnh sau Mean Filter

# Xác định biên ảnh với Canny Filter 
c = feature.canny(a, sigma=3).astype(np.uint8) * 255  # nhân 255 để dễ lưu
iio.imsave('a_Canny.jpg', c)

# Đổi màu ngẫu nhiên trong không gian RGB
img_rgb = iio.imread('a.jpg').astype(np.float32)
if len(img_rgb.shape) == 2:
    img_rgb = np.stack((img_rgb, img_rgb, img_rgb), axis=-1)
# Tạo kênh mày rgb
r = np.clip(img_rgb[:, :, 0] * np.random.uniform(0.5, 1.5), 0, 255)
g = np.clip(img_rgb[:, :, 1] * np.random.uniform(0.5, 1.5), 0, 255)
b = np.clip(img_rgb[:, :, 2] * np.random.uniform(0.5, 1.5), 0, 255)
random_rgb = np.stack((r, g, b), axis=-1).astype(np.uint8)
iio.imsave('a_rgb.jpg', random_rgb)
# Chuyển sang HSV và tách kênh Hue, Saturation, Value 
rgb_norm = img_rgb / 255.0
rgb2hsv = np.vectorize(colorsys.rgb_to_hsv)
h, s, v = rgb2hsv(rgb_norm[:, :, 0], rgb_norm[:, :, 1], rgb_norm[:, :, 2])

# Chuyển từng kênh về ảnh grayscale
h_img = (h * 255).astype(np.uint8)
s_img = (s * 255).astype(np.uint8)
v_img = (v * 255).astype(np.uint8)

iio.imsave('a_hue.jpg', h_img)
iio.imsave('a_saturation.jpg', s_img)
iio.imsave('a_value.jpg', v_img)

# Kết quả
plt.figure(figsize=(12, 6))
plt.subplot(231), plt.imshow(b, cmap='gray'), plt.title("Mean Filter")
plt.subplot(232), plt.imshow(c, cmap='gray'), plt.title("Canny Edges")
plt.subplot(233), plt.imshow(random_rgb), plt.title("Random RGB Colors")
plt.subplot(234), plt.imshow(h_img, cmap='gray'), plt.title("Hue Channel")
plt.subplot(235), plt.imshow(s_img, cmap='gray'), plt.title("Saturation Channel")
plt.subplot(236), plt.imshow(v_img, cmap='gray'), plt.title("Value Channel")
plt.tight_layout()
plt.show()

Câu 2:
import cv2
import numpy as np
import matplotlib.pyplot as plt
import random
import os

# Danh sách các ảnh đầu vào
image_files = ['image1.jpg', 'image2.jpg', 'image3.jpg']

# Đọc tất cả ảnh và lưu trong list
images = []
for f in image_files:
    img = cv2.imread(f, cv2.IMREAD_GRAYSCALE)
    if img is None:
        raise FileNotFoundError(f"Không tìm thấy ảnh: {f}")
    images.append(img)

# Tạo thư mục lưu ảnh kết quả nếu chưa có
if not os.path.exists('outputs'):
    os.makedirs('outputs')

# Các hàm biến đổi ảnh
def inverse_transformation(img):
    return 255 - img

def gamma_correction(img, gamma=None):
    if gamma is None:
        gamma = random.uniform(0.5, 2.0)
    corrected = np.power(img / 255.0, gamma) * 255
    return np.uint8(corrected)

def log_transformation(img, c=None):
    if c is None:
        c = random.uniform(1.0, 5.0)
    img_float = img.astype(np.float32) + 1
    log_img = c * np.log(img_float)
    log_img = 255 * log_img / np.max(log_img)
    return np.uint8(log_img)

def histogram_equalization(img):
    return cv2.equalizeHist(img)

def contrast_stretching(img, min_val=None, max_val=None):
    if min_val is None:
        min_val = random.randint(0, 100)
    if max_val is None:
        max_val = random.randint(150, 255)
    stretched = cv2.normalize(img, None, alpha=min_val, beta=max_val, norm_type=cv2.NORM_MINMAX)
    return stretched

def adaptive_histogram_equalization(img):
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    return clahe.apply(img)

# Tên phương pháp
methods = {
    'I': (inverse_transformation, 'inverse'),
    'G': (gamma_correction, 'gamma'),
    'L': (log_transformation, 'log'),
    'H': (histogram_equalization, 'histeq'),
    'C': (contrast_stretching, 'contrast'),
    'A': (adaptive_histogram_equalization, 'clahe')
}

# Hiển thị menu
print("\n===== MENU BIẾN ĐỔI ẢNH =====")
print("Nhấn phím để áp dụng trên cả 3 ảnh:")
print("I - Image Inverse Transformation")
print("G - Gamma Correction (0.5 - 2.0)")
print("L - Log Transformation (1.0 - 5.0)")
print("H - Histogram Equalization")
print("C - Contrast Stretching (min-max ngẫu nhiên)")
print("A - Adaptive Histogram Equalization (CLAHE)")
print("Q - Thoát")

while True:
    key = input("\nChọn phím (I/G/L/H/C/A hoặc Q để thoát): ").upper()

    if key == 'Q':
        print("Kết thúc chương trình.")
        break

    if key not in methods:
        print("Phím không hợp lệ. Hãy thử lại.")
        continue

    func, name = methods[key]

    # Xử lý từng ảnh và lưu kết quả
    results = []
    for i, img in enumerate(images, start=1):
        result = func(img)
        results.append(result)
        output_file = f'outputs/output_{name}_{i}.jpg'
        cv2.imwrite(output_file, result)
        print(f"Đã lưu: {output_file}")

    # Kết quả so sánh 3 ảnh
    plt.figure(figsize=(15, 5))
    for idx, result in enumerate(results, start=1):
        plt.subplot(1, 3, idx)
        plt.imshow(result, cmap='gray')
        plt.title(f'Ảnh {idx} - {name}')
        plt.axis('off')
    plt.show()

câu 3:
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as sn
import matplotlib.pylab as plt
from skimage import feature
import colorsys

# Đọc ảnh
img = iio.imread('colorful-ripe-tropical-fruits.jpg')
h1, w1 = img.shape[:2]

# Tăng kích thước thêm 30 pixel ở cả chiều cao và chiều rộng
new_h1 = h1 + 30
new_w1 = w1 + 30
fruits_resized = sn.zoom(img, (new_h1 / h1, new_w1 / w1, 1))
fruits_resized = np.clip(fruits_resized, 0, 255).astype(np.uint8)
iio.imwrite('resized_fruits.jpg', fruits_resized)

# Đọc ảnh
quangninh = iio.imread('quang-ninh.jpg')
h2, w2 = quangninh.shape[:2]
# Xoay ảnh 45 độ theo chiều kim đồng hồ 
rotated_qn = sn.rotate(quangninh, -45, reshape=True)
# Lật ngang 
flipped_qn = rotated_qn[:, ::-1]
flipped_qn = np.clip(flipped_qn, 0, 255).astype(np.uint8)
iio.imwrite('rotated_flipped_quangninh.jpg', flipped_qn)

# Đọc ảnh
pagoda = iio.imread('pagoda.jpg')
h3, w3 = pagoda.shape[:2]
# Phóng to ảnh gấp 5 lần
pagoda_resized = sn.zoom(pagoda, (5, 5, 1))
pagoda_blur = sn.gaussian_filter(pagoda_resized, sigma=(2.5, 2.5, 0))
pagoda_blur = np.clip(pagoda_blur, 0, 255).astype(np.uint8)
iio.imwrite('resized_blurred_pagoda.jpg', pagoda_blur)

# Chuyển sang float để tính log
pagoda_float = pagoda_blur.astype(np.float32)
c = 255 / np.log(1 + np.max(pagoda_float))
pagoda_log = c * np.log(1 + pagoda_float)
pagoda_log = np.clip(pagoda_log, 0, 255).astype(np.uint8)
iio.imwrite('log_pagoda.jpg', pagoda_log)

plt.figure(figsize=(15, 10))
plt.subplot(2, 2, 1)
plt.imshow(fruits_resized)
plt.title("Fruits Resized +30px")
plt.subplot(2, 2, 2)
plt.imshow(flipped_qn)
plt.title("Quang Ninh Rotated + Flipped")
plt.subplot(2, 2, 3)
plt.imshow(pagoda_blur)
plt.title("Pagoda 5x + Gaussian Blur")
plt.subplot(2, 2, 4)
plt.imshow(pagoda_log)
plt.title("Pagoda Log Transformation")
plt.tight_layout()
plt.show()

