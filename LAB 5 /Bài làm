#cau 2.1
from PIL import Image
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as nd
from skimage.morphology import label
from skimage.measure import regionprops
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from skimage.filters.thresholding import threshold_otsu

data = Image.open('geometric.png').convert('L')
a = np.asarray(data)
# performing Otsu's thresholding
thres = threshold_otsu(a)
# pixels with intensity greater than thes hold are kept
b = a > thres
# labelling is performed on b
c = label(b)
# Normalize c về 0–255 và convert sang uint8
c_uint8 = (255 * (c / np.max(c))).astype(np.uint8)
cl = Image.fromarray(c_uint8)
iio.imwrite('label_output.jpg', c_uint8)
# on the labelled image c, regionprops is performed
properties = ['Area', 'Centroid', 'BoundingBox']
d = regionprops(c)
# The following command creates an empty plot of
# dimension 6 inch by 6 inch
fig, ax = plt.subplots(ncols=1, nrows=1, figsize=(6, 6))
ax.imshow(c, cmap='YlOrRd')

for i in d:
    lr, lc, ur, uc = i['BoundingBox']
    rec_width = uc - lc
    rec_height = ur - lr
    # Rectangular boxes with origin at (lr,lc) are drawn
    rect = mpatches.Rectangle((lc, lr), rec_width, rec_height, fill=False,
                              edgecolor='black', linewidth=2)
    ax.add_patch(rect)

plt.show()

#cau 2.2 
from PIL import Image
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as nd
from skimage.morphology import label
from skimage.measure import regionprops
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from skimage.filters.thresholding import threshold_otsu

data = Image.open('geometric.png').convert('L')
bmg = abs(data - nd.shift(data, (0, 1), order=0))
plt.imshow(bmg)
plt.show()

#cau 2.3
from PIL import Image
import numpy as np
import cv2
import imageio.v2 as iio
import scipy.ndimage as nd
from skimage.morphology import label
from skimage.measure import regionprops
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from skimage.filters.thresholding import threshold_otsu

data = Image.open('geometric.png')
a = nd.sobel(data, axis=0)
b = nd.sobel(data, axis=1)
bmg = abs(a) + abs(b)
plt.imshow(bmg)
plt.show()

# cau 2.4
from PIL import Image
import numpy as np
import cv2
import imageio.v2 as iio
import scipy.ndimage as nd
from skimage.morphology import label
from skimage.measure import regionprops
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from skimage.filters.thresholding import threshold_otsu

def Harris (indata, alpha=0.2):
    x = nd.sobel(indata, 0)
    y = nd.sobel(indata, 1)
    xl = x ** 2
    yl = y ** 2
    xy = abs(x * y)
    xl = nd.gaussian_filter(xl,3)
    yl = nd.gaussian_filter(yl,3)
    xy = nd.gaussian_filter(xy,3)
    detC = xl * yl - 2 * xy
    trC = xl + yl
    R = detC - alpha * trC**2
    return R

data = Image.open('geometric.png')
bmg = Harris(data)
plt.imshow(bmg)
plt.show()

#cau 2.5.1
from PIL import Image
import numpy as np
import cv2
import imageio.v2 as iio
import scipy.ndimage as nd
from skimage.morphology import label
from skimage.measure import regionprops
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from skimage.filters.thresholding import threshold_otsu

def LineHough (data, gamma):
    V, H = data.shape
    R = int(np.sqrt(V * V + H * H))
    ho = np.zeros((R, 90), float) #Hough space
    w = data + 0
    ok = 1
    theta = np.arange(90)/180.0 * np.pi
    tp = np.arange(90).astype(float)
    while ok:
        mx = w.max()
        if mx < gamma:
            ok = 0
        else:
            v, h = divmod(w.argmax(), H)
            y = V - v
            x = h
            rh = x * np.cos(theta) + y * np.sin(theta)
            for i in range(len(rh)):
                if 0 <= rh[i] < R and 0 <= tp[i] < 90:
                    ho[int(rh[i]), int(tp[i])] += mx
            w[v,h] = 0
    return ho

data = np.zeros((256, 256))
data[128, 128] = 1
bmg = LineHough(data, 0.5)
plt.imshow(bmg)
plt.show()

# cau 2.5.2
from PIL import Image
import numpy as np
import cv2
import imageio.v2 as iio
import scipy.ndimage as nd
from skimage.morphology import label
from skimage.measure import regionprops
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from skimage.feature import corner_harris
from skimage.color import rgb2gray

data = iio.imread('bird.png')
image_gray = rgb2gray(data)
coordinate = corner_harris(image_gray, k = 0.001)

plt.figure(figsize=(20,10))
plt.imshow(coordinate)
plt.axis ('off')
plt.show()

# cau 2.6
import cv2
import numpy as np
from skimage.feature import corner_harris, corner_peaks
from skimage.color import rgb2gray
import matplotlib.pyplot as plt
from scipy.spatial.distance import cdist

# Đọc 2 ảnh 
img1 = cv2.imread('bird.png')
img2 = cv2.imread('geometric.png')
target_height = 400
target_width = 400
img1 = cv2.resize(img1, (target_width, target_height))
img2 = cv2.resize(img2, (target_width, target_height))

# Chuyển sang ảnh xám
gray1 = rgb2gray(img1)
gray2 = rgb2gray(img2)

# Tìm điểm đặc trưng
corners1 = corner_peaks(corner_harris(gray1), min_distance=5)
corners2 = corner_peaks(corner_harris(gray2), min_distance=5)

# Patch 11x11 quanh điểm đặc trưng
def get_descriptors(img, corners, size=11):
    descs, coords = [], []
    half = size // 2
    for y, x in corners:
        if y > half and x > half and y + half < img.shape[0] and x + half < img.shape[1]:
            patch = img[y-half:y+half+1, x-half:x+half+1].flatten()
            descs.append(patch)
            coords.append((x, y))
    return np.array(descs), coords

desc1, pts1 = get_descriptors(gray1, corners1)
desc2, pts2 = get_descriptors(gray2, corners2)

# So khớp mô tả
dist = cdist(desc1, desc2)
matches = np.argmin(dist, axis=1)

# Vẽ các cặp điểm khớp
h1, w1 = img1.shape[:2]
combined = np.hstack((img1, img2))
plt.figure(figsize=(14, 7))
plt.imshow(combined[..., ::-1])  # Chuyển BGR -> RGB để hiển thị đúng
for i in range(min(30, len(matches))):  # chỉ vẽ 30 cặp khớp
    x1, y1 = pts1[i]
    x2, y2 = pts2[matches[i]]
    plt.plot([x1, x2 + w1], [y1, y2], 'y', linewidth=0.8)
plt.show()


