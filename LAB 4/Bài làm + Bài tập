#2.1.1
- Nhập các thư viện cần thiết cho xử lý ảnh và hiển thị ảnh.
- data = Image.open('fruit.jpg').convert('L') : Mở ảnh 'fruit.jpg' và chuyển sang ảnh xám (grayscale) với giá trị pixel từ 0 đến 255.
- a = np.asarray(data) : Chuyển ảnh xám thành mảng 2D để tiện xử lý bằng các thư viện số học như NumPy.
- thres = threshold_otsu(a) : Tính ngưỡng phân tách nhị phân tự động bằng thuật toán Otsu.
- b = a > thres : Tạo ảnh nhị phân bằng cách so sánh mỗi pixel với ngưỡng vừa tìm được — pixel nào lớn hơn sẽ là True (trắng), còn lại là False (đen).
- b = Image.fromarray(b) : Chuyển ảnh nhị phân từ mảng NumPy sang ảnh kiểu PIL.
- plt.imshow(b) : Hiển thị ảnh nhị phân bằng thư viện matplotlib.
- plt.show() : Thực hiện việc hiển thị cửa sổ chứa ảnh đã được xử lý.

#2.1.2
- Nhập các thư viện cần thiết để xử lý ảnh và hiển thị ảnh.
- data = Image.open('fruit.jpg').convert('L'): Mở ảnh 'fruit.jpg' và chuyển sang ảnh xám với mức xám từ 0 đến 255.
- a = np.asarray(data): Chuyển ảnh thành mảng NumPy 2D để dễ dàng xử lý bằng toán học.
- b = threshold_local(a, 39, offset=10): Áp dụng ngưỡng cục bộ (local thresholding) với cửa sổ kích thước 39x39 và độ lệch ngưỡng là 10 để xử lý ảnh. Mỗi vùng nhỏ trong ảnh sẽ có ngưỡng khác nhau, giúp xử lý tốt hơn khi ánh sáng không đều.
- b = Image.fromarray(b): Chuyển mảng kết quả từ NumPy trở lại ảnh dạng PIL.
- plt.imshow(b): Hiển thị ảnh kết quả bằng thư viện matplotlib.
- plt.show(): Hiển thị cửa sổ chứa ảnh đã xử lý.

#2.2
import cv2
from PIL import Image
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as nd
from scipy.ndimage import label
import matplotlib.pylab as plt
from skimage.filters import threshold_local

# opening the image and converting it to grayscale
data = cv2.imread('fruit.jpg')

# converting image from color to grayscale
a = cv2.cvtColor(data, cv2.COLOR_BGR2GRAY)

# thresholding the image to obtain cell pixels
thresh, bl = cv2.threshold(a, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# since Otsu's method has over segmented the image
# erosion operation is performed
b2 = cv2.erode(bl, None, iterations = 2)

# distance transform is performed
dist = cv2.distanceTransform(b2, 2, 3)

# thresholding the distance transform image to obtain
# pixels that are foreground
thresh, dt = cv2.threshold(dist, 1, 255, cv2.THRESH_BINARY)

# performing labeling
labelled, ncc = label(dt)

# labelled is converted to 32-bit integer
labelled = labelled.astype(np.int32)

# performing watershed
cv2.watershed(data, labelled)

b = Image.fromarray(labelled)

plt.imshow(b)
plt.show()


#2.3.1
import cv2
from PIL import Image
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as nd
from scipy.ndimage import label
import matplotlib.pylab as plt
from skimage.filters import threshold_local

# opening the image and converting it to grayscale
data = Image.open('dil_img.gif').convert('L')
b = nd.binary_dilation(data, iterations=50)

c = Image.fromarray(b)
c.show()
plt.imshow(c)
plt.show()

#2.3.2
import cv2
from PIL import Image
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as nd
import matplotlib.pylab as plt
from skimage.filters import threshold_local

# opening the image and converting it to grayscale
data = Image.open('dil_img.gif').convert('L')
# defining the structuring element
s = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
b = nd.binary_opening(data, structure=s, iterations=25)

c = Image.fromarray(b)
c.show()
plt.imshow(c)
plt.show()

#2.3.3
import cv2
from PIL import Image
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as nd
from scipy.ndimage import label
import matplotlib.pylab as plt
from skimage.filters import threshold_local

# opening the image and converting it to grayscale
data = Image.open('dil_img.gif').convert('L')

# defining the structuring element
s = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
b = nd.binary_erosion(data, structure=s, iterations=50)

c = Image.fromarray(b)
c.show()
plt.imshow(c)
plt.show()

#2.3.4
import cv2
from PIL import Image
import numpy as np
import imageio.v2 as iio
import scipy.ndimage as nd
from scipy.ndimage import label
import matplotlib.pylab as plt
from skimage.filters import threshold_local

# opening the image and converting it to grayscale
data = Image.open('dil_img.gif').convert('L')

# defining the structuring element
s = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]
b = nd.binary_closing(data, structure=s, iterations=50)

c = Image.fromarray(b)
c.show()
plt.imshow(c)
plt.show()

##Bài tập
#1
from PIL import Image
import numpy as np
import scipy.ndimage as nd
from skimage.filters import threshold_otsu
import matplotlib.pyplot as plt

data = Image.open('exercise/dalat.jpg').convert('L')
bmg = np.array(data)[0:350, 0:500]
shifted = np.zeros_like(bmg)
shifted[:, 100:] = bmg[:, :-100]
thres = threshold_otsu(shifted)
b = shifted > (thres * 0.3)
c = Image.fromarray(b.astype(np.uint8) * 255)
c.save("lang_biang.jpg")
plt.imshow(c)
plt.title("LangBiang")
plt.show()

#2
from PIL import Image
import numpy as np
import scipy.ndimage as nd
from skimage.filters import threshold_local
import matplotlib.pyplot as plt

data = Image.open('exercise/dalat.jpg').convert('L')
data = np.asarray(data)
bmg = data[0:2000, 0:2000]
rotated = nd.rotate(bmg, 45, reshape=True)
thresh = threshold_local(rotated, block_size=39, offset=60)
b = rotated > thresh
c = Image.fromarray(b.astype(np.uint8) * 255)
c.save("ho_xuan_huong.jpg")
plt.imshow(c)
plt.show()

#3
from PIL import Image
import numpy as np
import scipy.ndimage as nd
import matplotlib.pyplot as plt

data = Image.open('exercise/dalat.jpg').convert('L')
data = np.asarray(data)
bmg = data[0:350, 1000:1500]
scaled = nd.zoom(bmg, zoom=(0.8, 0.8))
mapped = np.zeros_like(bmg)
sx, sy = scaled.shape
mapped[:sx, 50:50 + sy] = scaled
binary = mapped > 128
s = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
b = nd.binary_closing(binary, structure=s, iterations=20)
c = Image.fromarray(b.astype(np.uint8) * 255)
c.save("quan_truong_lam_vien.jpg")
plt.imshow(c)
plt.show()

#4
from PIL import Image
import numpy as np
import scipy.ndimage as nd
from skimage.filters import threshold_otsu, threshold_local
import matplotlib.pyplot as plt

def xu_ly_langbiang():
    data = Image.open('exercise/dalat.jpg').convert('L')
    bmg = np.array(data)[0:350, 0:500]
    shifted = np.zeros_like(bmg)
    shifted[:, 100:] = bmg[:, :-100]
    thres = threshold_otsu(shifted)
    b = shifted > (thres * 0.3)
    c = Image.fromarray(b.astype(np.uint8) * 255)
    c.save("lang_biang.jpg")
    plt.imshow(c, cmap='gray')
    plt.title("LangBiang")
    plt.show()

def xu_ly_ho_xuan_huong():
    data = Image.open('exercise/dalat.jpg').convert('L')
    data = np.asarray(data)
    bmg = data[0:2000, 0:2000]
    rotated = nd.rotate(bmg, 45, reshape=True)
    thresh = threshold_local(rotated, block_size=39, offset=60)
    b = rotated > thresh
    c = Image.fromarray(b.astype(np.uint8) * 255)
    c.save("ho_xuan_huong.jpg")
    plt.imshow(c, cmap='gray')
    plt.title("Hồ Xuân Hương")
    plt.show()

def xu_ly_quangtruong():
    data = Image.open('exercise/dalat.jpg').convert('L')
    data = np.asarray(data)
    bmg = data[0:350, 1000:1500]
    scaled = nd.zoom(bmg, zoom=(0.8, 0.8))
    mapped = np.zeros_like(bmg)
    sx, sy = scaled.shape
    mapped[:sx, 50:50 + sy] = scaled
    binary = mapped > 128
    s = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
    b = nd.binary_closing(binary, structure=s, iterations=20)
    c = Image.fromarray(b.astype(np.uint8) * 255)
    c.save("quan_truong_lam_vien.jpg")
    plt.imshow(c, cmap='gray')
    plt.title("Quảng trường Lâm Viên")
    plt.show()

# Menu 
while True:
    print("\n===== MENU XỬ LÝ ẢNH ĐÀ LẠT =====")
    print("1. Phân vùng LangBiang (Otsu + dịch ảnh)")
    print("2. Xử lý Hồ Xuân Hương (xoay + adaptive threshold)")
    print("3. Xử lý Quảng trường Lâm Viên (co ảnh + closing)")
    print("0. Thoát")
    choice = input("Nhập lựa chọn của bạn: ")

    if choice == '1':
        xu_ly_langbiang()
    elif choice == '2':
        xu_ly_ho_xuan_huong()
    elif choice == '3':
        xu_ly_quangtruong()
    elif choice == '0':
        print("Chương trình kết thúc.")
        break
    else:
        print("Lựa chọn không hợp lệ. Vui lòng thử lại.")


